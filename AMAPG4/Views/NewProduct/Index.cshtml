@using AMAPG4.Models.Catalog
@model AMAPG4.ViewModels.NewProductViewModel
@{
    ViewBag.Title = "Formulaire de proposition produit";
    Layout = "_Layout";
}

<link rel="stylesheet" href="~/css/forms.css" />
<link rel="stylesheet" href="~/css/global.css" />



<div class="container">
    <div class="form-container">
        <h2>Demande d'ajout d'un nouveau produit</h2>
        @using (Html.BeginForm("Index", "NewProduct", FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.HiddenFor(m => m.ProducerId)

            <!-- Nom du produit -->
            <div class="proposition input-field">
                @Html.LabelFor(m => m.NewProduct.ProductName, "Nom du produit")
                @Html.TextBoxFor(m => m.NewProduct.ProductName, new { @class = "proposition input-field", placeholder = "Nom du produit" })
                @Html.ValidationMessageFor(m => m.NewProduct.ProductName, "", new { @class = "error-message" })
            </div>

            <!-- Type de produit -->
            <div>
                @Html.LabelFor(m => m.NewProduct.ProductType, "Type de produit")
                @Html.DropDownListFor(m => m.NewProduct.ProductType, new SelectList(Enum.GetValues(typeof(ProductType)).Cast<ProductType>().Select(e => new SelectListItem { Value = e.ToString(), Text = e.ToString() }), "Value", "Text"), "Sélectionnez un type", new { @class = "proposition input-field" })
                @Html.ValidationMessageFor(m => m.NewProduct.ProductType, "", new { @class = "error-message" })
            </div>

            <!-- Description -->
            <div>
                @Html.LabelFor(m => m.NewProduct.Description, "Description")
                @Html.TextAreaFor(m => m.NewProduct.Description, new { @class = "proposition input-field", placeholder = "Description", rows = 4 })
                @Html.ValidationMessageFor(m => m.NewProduct.Description, "", new { @class = "error-message" })
            </div>

            <!-- Prix unitaire -->
            <div>
                @Html.LabelFor(m => m.NewProduct.Price, "Prix unitaire (€)")
                @Html.TextBoxFor(m => m.NewProduct.Price, new { @class = "proposition input-field", placeholder = "Prix unitaire" })
                @Html.ValidationMessageFor(m => m.NewProduct.Price, "", new { @class = "error-message" })
            </div>

            <!-- Quantité en stock -->
            <div>
                @Html.LabelFor(m => m.NewProduct.Stock, "Quantité en stock")
                @Html.TextBoxFor(m => m.NewProduct.Stock, new { @class = "styled-input-proposition", type = "number", min = "0" })
                @Html.ValidationMessageFor(m => m.NewProduct.Stock, "", new { @class = "error-message" })
            </div>

            <!-- Date limite -->
            <div class="limit-date">
                @Html.LabelFor(m => m.NewProduct.LimitDate, "Date limite")
                @Html.TextBoxFor(m => m.NewProduct.LimitDate, new { @class = "styled-input-proposition", type = "date" })
                @Html.ValidationMessageFor(m => m.NewProduct.LimitDate, "", new { @class = "error-message" })
            </div>


            <!-- Image du produit -->
            <div>
                @Html.Label("ProductImage", "Image du produit")
                <input type="file" name="ProductImage" class="input-field" />
            </div>

            <!-- Bouton d'envoi -->
            <div>
                <input type="submit" value="Envoyer" class="btn-submit" />
            </div>

            <!-- Message de confirmation -->
            @if (ViewBag.Message != null)
            {
                <p class="confirmation-message">@ViewBag.Message</p>
            }
        }
    </div>
</div>
